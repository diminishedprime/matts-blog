{"data":{"orgContent":{"html":"<p>Lately, I've been using a feature in org-babel called org-babel-tangle, to create literate programming dotfiles. It's simple to use, and makes for<i>extremely</i> readable code.</p><p>For this blog, I'll be (re)creating my tmux config by tangling the source seen in this post. Everything below the break is copied over (with some minor editorilization) from my actual tmux org file.</p><hr><div class=\"section\"><h2>Tmux Config</h2><p>I prefer using <code>M-Space</code> for my tmux modifier instead of the default <code>C-b</code>, so I start by getting that setup.</p><pre><code class=\"language-conf\">  unbind C-b\n  set -g prefix C-Space\n  set -g prefix M-Space\n  bind Space send-prefix</code></pre><p>I want my terminal to be setup as <code>xterm-24bits</code> since that (along with some other magic), is necessary to get 24-bit color to work with emacs.</p><pre><code class=\"language-conf\">  set -g default-terminal \"xterm-24bits\"\n  set -ga terminal-overrides \",xterm-24bits:Tc\"</code></pre><p>I prefer to use vi keybindings.</p><pre><code class=\"language-conf\">  set-window-option -g mode-keys vi</code></pre><p>Tmux copy-paste is confusing, but I don't blame tmux. Setting this up makes it where (at least most of the time), tmux copies to my system clipboard.</p><p>Use <code>M-Space [</code> to enter copy mode.</p><pre><code class=\"language-conf\">  bind-key -T copy-mode-vi 'v' send-keys -X begin-selection\n  bind-key -T copy-mode-vi 'y' send-keys -X copy-selection-and-cancel\n  bind-key -T copy-mode-vi 'Escape' send-keys -X cancel</code></pre><p>This makes it where escape isn't sent as mod all the time.</p><pre><code class=\"language-conf\">  set -sg escape-time 0</code></pre><p>Using the mouse with tmux is often easier than other means, fite me.</p><pre><code class=\"language-conf\">  set -g mouse on</code></pre><p>Some vim-influenced things. Use <code>h=, =j</code>, <code>k=, =l</code> for selecting panes, and <code>H=, =J</code>, <code>K=, =L</code>for swapping panes in that direction.</p><pre><code class=\"language-conf\">  bind h select-pane -L\n  bind j select-pane -D\n  bind k select-pane -U\n  bind l select-pane -R\n\n  bind H select-pane -L \\; swap-pane -s '!'\n  bind J select-pane -D \\; swap-pane -s '!'\n  bind K select-pane -U \\; swap-pane -s '!'\n  bind L select-pane -R \\; swap-pane -s '!'</code></pre><p>Bindings for selecting windows. <code>M-Space 0-9</code> are set up (chrome-style) to pick that window. <code>M-Space b</code> and <code>M-b</code> are set up (i3-style) to switch to the previously selected window.</p><pre><code class=\"language-conf\">  bind-key -n M-b last-window\n  bind-key b last-window\n\n  bind-key -n M-0 select-window -t 0\n  bind-key -n M-1 select-window -t 1\n  bind-key -n M-2 select-window -t 2\n  bind-key -n M-3 select-window -t 3\n  bind-key -n M-4 select-window -t 4\n  bind-key -n M-5 select-window -t 5\n  bind-key -n M-6 select-window -t 6\n  bind-key -n M-7 select-window -t 7\n  bind-key -n M-8 select-window -t 8\n  bind-key -n M-9 select-window -t 9</code></pre><p>I like to split-windows like in emacs.</p><ul><li><code>M-Space \\</code> - split horizontally (\\ is the same key as |, but holding shift is a pita)</li><li><code>M-Space -</code> - split vertically</li></ul><p>We also unbind the original keys to keep things clean.</p><pre><code class=\"language-conf\">  unbind '\"'\n  bind \\ split-window -h -c \"#{pane_current_path}\"\n\n  unbind %\n  bind - split-window -v -c \"#{pane_current_path}\"</code></pre><p>I usually just use <code>M-Space z</code> for full screening, but I like having <code>M-Space u</code>also available since that matches my i3 setup.</p><pre><code class=\"language-conf\">  bind u resize-pane -Z</code></pre><p>Always nice to be able to resource the tmux file so it's easier to try out changes.</p><pre><code class=\"language-conf\">  bind r source-file ~/.tmux.conf</code></pre><p>A bunch of status-related things.</p><ul><li><code>status-keys emacs</code> - Use emacs-style bindings for status-keys things. This lets me use things like <code>C-e</code> and <code>C-d</code> while editing window names.</li></ul><pre><code class=\"language-conf\">  set -g status on\n  set -g status-justify left\n  set -g status-keys emacs\n  set -g status-position top\n  set -g status-style 'fg=#ffffff,bg=#002b36'\n  set -g status-right ''\n  set -g status-left '#(~/.local/bin/mjh-tmux-status-left.sh)'\n  set -g window-status-format '#[fg=#657b83]#[bg=#002b36]#I: #W'\n  set -g window-status-current-format '#[fg=#2aa198]#[bg=002b36]#I: #W'</code></pre><p>Use fish as the default shell</p><pre><code class=\"language-conf\">  set -g default-shell /usr/bin/fish</code></pre></div>","meta":{"title":"Org Babel Tangle","date":"April 21, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/index","previous":null,"next":null}}
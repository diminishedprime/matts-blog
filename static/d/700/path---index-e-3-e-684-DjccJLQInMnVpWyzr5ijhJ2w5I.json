{"data":{"orgContent":{"html":"<p>I recently started making heavy use of a feature in org-babel called org-babel-tangle, to create <a href=\"https://en.wikipedia.org/wiki/Literate_programming\">literate</a> <a href=\"https://en.wikipedia.org/wiki/Hidden_file_and_hidden_directory\">dotfiles</a>. It's simple to use, and makes for<i>very</i> readable code.</p><p>For this blog, I'll use my <code>exports.sh</code>. I use this file to make sure my <code>$PATH</code> and<code>$EDITOR</code> environment variables are set. Everything below the break is copied over (with some minor editorialization) from my actual <code>exports.org</code> file. And since you can <a href=\"https://www.gatsbyjs.org/packages/gatsby-transformer-orga/\">author gatsby content with org markdown</a>, I was able to just copy over the contents whole cloth.</p><p><a href=\"https://raw.githubusercontent.com/diminishedprime/matts-blog/master/content/blog/org-tangle/index.org\">Raw text for this file.</a></p><hr><div class=\"section\"><h2>Exports</h2><p>To tangle this file, open it with <a href=\"http://spacemacs.org/\">spacemacs</a> with the <a href=\"http://spacemacs.org/layers/+emacs/org/README.html\">org layer</a> enabled, then enter</p><pre><code class=\"language-text\">  ,bt</code></pre><p>This file should be sourced as soon as possible, since we want all child processes to have access to these exported variables.</p><pre><code class=\"language-sh\">  # This is effectively a compiled file. The source can be found in\n  # ~/programming/dotfiles/dotfiles/exports.org</code></pre><p>Since we symlink all of our scripts to <code>~/.local/bin</code>, we want to make sure that they are visible.</p><pre><code class=\"language-sh\">  export PATH=\"$PATH\":~/.local/bin</code></pre><p>We also want to make sure that cargo bin is on our path since many of our executables end up there.</p><pre><code class=\"language-sh\">  export PATH=\"$HOME/.cargo/bin:$PATH\"</code></pre><p>In order for emacs to have 24-bit color in terminal mode, we need a combination of our <code>terminfo</code> entry and to set our term to be <code>xterm-24bits</code></p><pre><code class=\"language-sh\">  export TERM=xterm-24bits</code></pre><p>And speaking of editor, we want our editor to be emacsclient. The <code>t</code> flag opens a new Emacs frame on the current terminal. and the =-a \"\"= opens emacs in daemon mode, then connects to it.</p><pre><code class=\"language-sh\">  export EDITOR='emacsclient -t -a \"\"'</code></pre><p>We want to have pretty dircolors as well. This will make sure that happens.</p><pre><code class=\"language-sh\">  eval \"$(dircolors ~/programming/dotfiles/dotfiles/.dircolors)\"</code></pre><hr><hr></div><div class=\"section\"><h2>Result</h2><p>After tangling the above source block, we're left with the following.</p><pre><code class=\"language-sh\">  #!/bin/bash\n  # This is effectively a compiled file. The source can be found in\n  # ~/programming/dotfiles/dotfiles/exports.org\n\n  export PATH=\"$PATH\":~/.local/bin\n\n  export PATH=\"$HOME/.cargo/bin:$PATH\"\n\n  export TERM=xterm-24bits\n\n  export EDITOR='emacsclient -t -a \"\"'\n\n  eval \"$(dircolors ~/programming/dotfiles/dotfiles/.dircolors)\"</code></pre></div><div class=\"section\"><h2>Takeaways</h2><p>This is a rather simple example, but it shows the general power of this method of authoring dotfiles. By creating files this way, I feel more encouraged to add in prose, explanations, and links to explain <i>why</i> I'm doing something.</p></div>","meta":{"title":"Org Babel Tangle","date":"April 21, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/index","previous":null,"next":null}}